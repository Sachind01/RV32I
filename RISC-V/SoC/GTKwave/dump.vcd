$date
	Thu Apr  4 23:09:51 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Testbench $end
$var wire 32 ! imaddr_out [31:0] $end
$var wire 1 " dmwr_req_out $end
$var wire 4 # dmwr_mask_out [3:0] $end
$var wire 32 $ dmdata_out [31:0] $end
$var wire 32 % dmaddr_out [31:0] $end
$var reg 1 & clk $end
$var reg 32 ' dmdata_in [31:0] $end
$var reg 32 ( instr_in [31:0] $end
$var reg 1 ) rst $end
$var reg 32 * zero [31:0] $end
$scope module dut $end
$var wire 4 + alu_opcode_out [3:0] $end
$var wire 1 , alu_src_out $end
$var wire 1 & clk $end
$var wire 32 - i_addr_out [31:0] $end
$var wire 32 . imaddr_out [31:0] $end
$var wire 32 / imm_out [31:0] $end
$var wire 32 0 instr_in [31:0] $end
$var wire 2 1 load_size_out [1:0] $end
$var wire 1 2 load_unsigned_out $end
$var wire 32 3 pc_out [31:0] $end
$var wire 32 4 pc_plus_4_out [31:0] $end
$var wire 5 5 rd_addr_out [4:0] $end
$var wire 1 6 rf_wr_en_out $end
$var wire 32 7 rs1_out [31:0] $end
$var wire 32 8 rs2_out [31:0] $end
$var wire 1 ) rst $end
$var wire 3 9 wb_mux_sel_out [2:0] $end
$var wire 1 : wr_en_reg_file_out $end
$var wire 32 ; wb_mux_out [31:0] $end
$var wire 5 < rs2_addr_in [4:0] $end
$var wire 5 = rs1_addr_in [4:0] $end
$var wire 2 > pc_src_out [1:0] $end
$var wire 32 ? pc_mux_out [31:0] $end
$var wire 7 @ opcode_out [6:0] $end
$var wire 1 A mem_wr_req_out $end
$var wire 32 B lu_output_out [31:0] $end
$var wire 25 C instr_31_7 [24:0] $end
$var wire 3 D imm_type_out [2:0] $end
$var wire 1 E iadder_src_out $end
$var wire 32 F iadder_out_reg_out [31:0] $end
$var wire 7 G funct7_out [6:0] $end
$var wire 3 H funct3_out [2:0] $end
$var wire 1 I flush_out $end
$var wire 1 " dmwr_req_out $end
$var wire 4 J dmwr_mask_out [3:0] $end
$var wire 32 K dmdata_out [31:0] $end
$var wire 32 L dmaddr_out [31:0] $end
$var wire 1 M branch_taken_out $end
$var wire 32 N alu_result_out [31:0] $end
$var wire 32 O alu_2_src_mux_out [31:0] $end
$scope module ALU_inst $end
$var wire 32 P op_1_in [31:0] $end
$var wire 4 Q opcode_in [3:0] $end
$var wire 32 R op_2_in [31:0] $end
$var reg 32 S result_out [31:0] $end
$upscope $end
$scope module branch_unit_inst $end
$var wire 1 M branch_taken_out $end
$var wire 5 T opcode_6_2_in [4:0] $end
$var wire 32 U rs1_in [31:0] $end
$var wire 32 V rs2_in [31:0] $end
$var wire 3 W funct3_in [2:0] $end
$var reg 1 X branch_taken_out_net $end
$upscope $end
$scope module control_unit_inst $end
$var wire 1 & clk_in $end
$var wire 2 Y pc_src_out [1:0] $end
$var wire 1 ) rst_in $end
$var wire 1 I flush_out $end
$var reg 1 I flush_out_net $end
$var reg 2 Z next_state [1:0] $end
$var reg 2 [ pc_src_out_reg [1:0] $end
$var reg 2 \ present_state [1:0] $end
$upscope $end
$scope module decoder_inst $end
$var wire 4 ] alu_opcode_out [3:0] $end
$var wire 1 , alu_src_out $end
$var wire 1 ^ funct7_5_in $end
$var wire 1 E iadder_src_out $end
$var wire 1 _ is_addi $end
$var wire 1 ` is_andi $end
$var wire 1 a is_ori $end
$var wire 1 b is_slti $end
$var wire 1 c is_sltiu $end
$var wire 1 d is_xori $end
$var wire 2 e load_size_out [1:0] $end
$var wire 1 2 load_unsigned_out $end
$var wire 1 A mem_wr_req_out $end
$var wire 5 f opcode_in [6:2] $end
$var wire 1 6 rf_wr_en_out $end
$var wire 3 g wb_mux_sel_out [2:0] $end
$var wire 1 h is_store $end
$var wire 1 i is_op_imm $end
$var wire 1 j is_op $end
$var wire 1 k is_lui $end
$var wire 1 l is_load $end
$var wire 1 m is_jalr $end
$var wire 1 n is_jal $end
$var wire 1 o is_branch $end
$var wire 1 p is_auipc $end
$var wire 3 q imm_type_out [2:0] $end
$var wire 3 r funct3_in [2:0] $end
$var wire 6 s funct3_decoded_net [5:0] $end
$upscope $end
$scope module immediate_adder_inst $end
$var wire 1 E iaddr_src $end
$var wire 32 t imm_in [31:0] $end
$var wire 32 u pc_in [31:0] $end
$var wire 32 v rs1_in [31:0] $end
$var wire 32 w mux1_out [31:0] $end
$var reg 32 x iaddr_out [31:0] $end
$upscope $end
$scope module immediate_generator_inst $end
$var wire 32 y imm_out [31:0] $end
$var wire 3 z imm_type_in [2:0] $end
$var wire 25 { instr_in [31:7] $end
$var reg 32 | B [31:0] $end
$var reg 32 } I [31:0] $end
$var reg 32 ~ J [31:0] $end
$var reg 32 !" R [31:0] $end
$var reg 32 "" S [31:0] $end
$var reg 32 #" U [31:0] $end
$var reg 32 $" imm_out_reg [31:0] $end
$upscope $end
$scope module instruction_mux_inst $end
$var wire 1 I flush_in $end
$var wire 32 %" instr_in [31:0] $end
$var wire 5 &" rd_addr_out [4:0] $end
$var wire 5 '" rs2_addr_in [4:0] $end
$var wire 5 (" rs1_addr_in [4:0] $end
$var wire 7 )" opcode_out [6:0] $end
$var wire 25 *" instr_31_7 [24:0] $end
$var wire 7 +" funct7_out [6:0] $end
$var wire 3 ," funct3_out [2:0] $end
$var reg 32 -" flush_out_logic [31:0] $end
$upscope $end
$scope module load_unit_inst $end
$var wire 2 ." iaddr_out_1_to_0_in [1:0] $end
$var wire 2 /" load_size_in [1:0] $end
$var wire 1 2 load_unsigned_in $end
$var wire 32 0" lu_output_out [31:0] $end
$var wire 32 1" dmdata_in [31:0] $end
$var reg 32 2" lu_output_out_reg [31:0] $end
$upscope $end
$scope module pc_mux_inst $end
$var wire 1 M branch_taken_in $end
$var wire 32 3" i_addr_out [31:0] $end
$var wire 31 4" iaddr_in [30:0] $end
$var wire 32 5" pc_in [31:0] $end
$var wire 32 6" pc_mux_out [31:0] $end
$var wire 32 7" pc_plus_4_out [31:0] $end
$var wire 2 8" pc_src_in [1:0] $end
$var wire 1 ) rst_in $end
$var wire 32 9" imm_addr_net [31:0] $end
$var wire 32 :" PC_plus_4_net [31:0] $end
$var reg 32 ;" next_pc [31:0] $end
$var reg 32 <" pc_mux_out_net [31:0] $end
$upscope $end
$scope module reg_block_1_inst $end
$var wire 1 & clk $end
$var wire 32 =" pc_mux_in [31:0] $end
$var wire 32 >" pc_out [31:0] $end
$var wire 1 ) rst_in $end
$var reg 32 ?" pc_out_reg [31:0] $end
$upscope $end
$scope module reg_block_2_inst $end
$var wire 4 @" alu_opcode_in [3:0] $end
$var wire 1 , alu_src_in $end
$var wire 1 M branch_taken_in $end
$var wire 1 & clk_in $end
$var wire 32 A" iadder_in [31:0] $end
$var wire 32 B" imm_in [31:0] $end
$var wire 2 C" load_size_in [1:0] $end
$var wire 1 2 load_unsigned_in $end
$var wire 32 D" pc_in [31:0] $end
$var wire 32 E" pc_plus_4_in [31:0] $end
$var wire 5 F" rd_addr_in [4:0] $end
$var wire 1 ) reset_in $end
$var wire 1 6 rf_wr_en_in $end
$var wire 32 G" rs1_in [31:0] $end
$var wire 32 H" rs2_in [31:0] $end
$var wire 3 I" wb_mux_sel_in [2:0] $end
$var reg 4 J" alu_opcode_reg_out [3:0] $end
$var reg 1 K" alu_src_reg_out $end
$var reg 32 L" iadder_out_reg_out [31:0] $end
$var reg 32 M" imm_reg_out [31:0] $end
$var reg 2 N" load_size_reg_out [1:0] $end
$var reg 1 O" load_unsigned_reg_out $end
$var reg 32 P" pc_plus_4_reg_out [31:0] $end
$var reg 32 Q" pc_reg_out [31:0] $end
$var reg 5 R" rd_addr_reg_out [4:0] $end
$var reg 1 S" rf_wr_en_reg_out $end
$var reg 32 T" rs1_reg_out [31:0] $end
$var reg 32 U" rs2_reg_out [31:0] $end
$var reg 3 V" wb_mux_sel_reg_out [2:0] $end
$upscope $end
$scope module reg_file_inst $end
$var wire 1 & clk_in $end
$var wire 5 W" rd_addr_in [4:0] $end
$var wire 5 X" rs1_addr_in [4:0] $end
$var wire 5 Y" rs2_addr_in [4:0] $end
$var wire 1 ) rst_in $end
$var wire 1 : wr_en_in $end
$var wire 32 Z" rd_data [31:0] $end
$var reg 32 [" rs1_data_out [31:0] $end
$var reg 32 \" rs1_out [31:0] $end
$var reg 32 ]" rs2_data_out [31:0] $end
$var reg 32 ^" rs2_out [31:0] $end
$var integer 32 _" i [31:0] $end
$upscope $end
$scope module store_unit_inst $end
$var wire 32 `" dmaddr_out [31:0] $end
$var wire 1 " dmwr_req_out $end
$var wire 3 a" func3 [2:0] $end
$var wire 32 b" iadder_in [31:0] $end
$var wire 1 A mem_wr_req $end
$var wire 32 c" rs2_in [31:0] $end
$var wire 4 d" dmwr_mask_out [3:0] $end
$var wire 32 e" dmdata_out [31:0] $end
$upscope $end
$scope module wb_mux_inst $end
$var wire 32 f" ALU_result_in [31:0] $end
$var wire 1 , ALU_src_reg_in $end
$var wire 32 g" iadder_out_reg_in [31:0] $end
$var wire 32 h" imm_reg_in [31:0] $end
$var wire 32 i" lu_output_in [31:0] $end
$var wire 32 j" pc_plus_4_reg_in [31:0] $end
$var wire 32 k" rs2_reg_in [31:0] $end
$var wire 32 l" wb_mux_out [31:0] $end
$var wire 3 m" wb_mux_sel_reg_in [2:0] $end
$var wire 32 n" alu_2_src_mux_out [31:0] $end
$var reg 32 o" wb_mux_out_reg [31:0] $end
$upscope $end
$scope module write_enable_gen_inst $end
$var wire 1 I flush_in $end
$var wire 1 6 wr_en_reg_in $end
$var wire 1 : wr_en_reg_file_out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 o"
bx n"
bx0 m"
b0 l"
b0 k"
b0x00 j"
b0 i"
bx h"
b0 g"
bx f"
b0 e"
b1111 d"
b0 c"
b0 b"
b0 a"
b0 `"
b100000 _"
b0 ^"
bx ]"
b0 \"
bx ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
0S"
b0 R"
b0 Q"
b0 P"
0O"
b0 N"
b0 M"
b0 L"
0K"
b0 J"
bx0 I"
b0 H"
b0 G"
b0 F"
b0x00 E"
b0 D"
b0 C"
bx B"
bx A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b100 ;"
b100 :"
bx0 9"
b0 8"
b0x00 7"
b0 6"
b0 5"
bx 4"
bx 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b10011 -"
b0 ,"
b0 +"
b0 *"
b10011 )"
b0 ("
b0 '"
b0 &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
b1 z
bx y
bx x
b0 w
b0 v
b0 u
bx t
b1 s
b0 r
b1 q
0p
0o
0n
0m
0l
0k
0j
1i
0h
bx0 g
b100 f
b0 e
0d
0c
0b
0a
0`
1_
0^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
0X
b0 W
b0 V
b0 U
b100 T
bx S
bx R
b0 Q
b0 P
bx O
bx N
0M
b0 L
b0 K
b1111 J
1I
b0 H
b0 G
b0 F
0E
b1 D
b0 C
b0 B
0A
b10011 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
0:
bx0 9
b0 8
b0 7
x6
b0 5
b0x00 4
b0 3
02
b0 1
bx 0
bx /
bz .
bx -
0,
b0 +
b0 *
1)
bx (
bx '
1&
b0 %
b0 $
b1111 #
0"
bz !
$end
#5000
0&
#10000
bx #
bx J
bx d"
bx ."
bx M"
bx0 V"
xS"
bx %
bx L
bx `"
bx F
bx L"
bx b"
bx g"
b0x00 P"
b0 ]"
b0 ["
1&
0)
#15000
0&
#20000
1&
#25000
0&
#30000
1&
#35000
0&
#40000
1&
#45000
0&
#50000
1&
#55000
0&
#60000
1&
#65000
0&
#70000
1&
#75000
0&
#80000
1&
#85000
0&
#90000
1&
#95000
0&
#100000
1&
#105000
0&
#110000
1&
#115000
0&
#120000
1&
#125000
0&
#130000
1&
#135000
0&
#140000
1&
#145000
0&
#150000
1&
#155000
0&
#160000
1&
#165000
0&
#170000
1&
#175000
0&
#180000
1&
#185000
0&
#190000
1&
#195000
0&
#200000
1&
#205000
0&
#210000
1&
#215000
0&
#220000
1&
#225000
0&
#230000
1&
#235000
0&
#240000
1&
#245000
0&
#250000
1&
#255000
0&
#260000
1&
#265000
0&
#270000
1&
#275000
0&
#280000
1&
#285000
0&
#290000
1&
#295000
0&
#300000
1&
#305000
0&
#310000
1&
#315000
0&
#320000
1&
#325000
0&
#330000
1&
#335000
0&
#340000
1&
#345000
0&
#350000
1&
#355000
0&
#360000
1&
#365000
0&
#370000
1&
#375000
0&
#380000
1&
#385000
0&
#390000
1&
#395000
0&
#400000
1&
#405000
0&
#410000
1&
#415000
0&
#420000
1&
#425000
0&
#430000
1&
#435000
0&
#440000
1&
#445000
0&
#450000
1&
#455000
0&
#460000
1&
#465000
0&
#470000
1&
#475000
0&
#480000
1&
#485000
0&
#490000
1&
#495000
0&
#500000
1&
